generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  role         UserRole
  image        String?        @default("https://i.ibb.co.com/8MNRgGS/anonymous-person.png")
  address      String
  phoneNumber  String
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  shop         Shop?
  order        Order[]
  recentView   RecentView[]
  notification Notification[]
  wishlist     Wishlist[]
  cartItems    CartItems[]
  Payment      Payment[]
  Review       Review[]
}

model Shop {
  id             String     @id @default(uuid())
  name           String
  logo           String
  vendorId       String     @unique
  vendor         User       @relation(fields: [vendorId], references: [id])
  description    String
  totalFollowers Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  product        Product[]
  order          Order[]
  response       Response[]
  coupon         Coupon[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  description String?
  products    Product[]
}

model Product {
  id              String  @id @default(uuid())
  name            String  @db.VarChar(255)
  description     String  @db.Text
  price           Float
  discountPercent Float?
  stock           Int
  image           String
  isFeatured      Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  isAvailable    Boolean  @default(true)
  averageRatings Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  reviews    Review[]
  orderItem  OrderItem[]
  recentView RecentView[]
  wishlist   Wishlist[]
  cartItems  CartItems[]
}

model CartItems {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Review {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  rating   Int
  comment  String?
  response Response[]
}

model Order {
  id         String @id @default(uuid())
  customerId String

  customer User @relation(fields: [customerId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  totalAmount Float
  status      OrderStatus @default(PENDING)
  couponId    String?
  coupon      Coupon?     @relation(fields: [couponId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  price      Float
  totalPrice Float
}

model Response {
  id        String   @id @default(uuid())
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

model RecentView {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  viewedAt  DateTime @default(now())

  @@unique([userId, productId])
}

model Payment {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  amount        Float
  status        PaymentStatus @default(PENDING)
  method        String
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  title      String
  message    String
  isRead     Boolean  @default(false)
  redirectTo String
  createdAt  DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float
  minSpend    Float?
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdBy   UserRole
  shopId      String?
  shop        Shop?    @relation(fields: [shopId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usageLimit  Int?
  usageCount  Int      @default(0)
  Order       Order[]
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
  PAYMENT_PENDING
}
